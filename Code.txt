/**********************************
main goal:
the speaker will have 3 pushbuttons of play/pause, next song/volume up, previous song/volume down.

We can use the Arduino and itâ€™s serial read/write function to control this module.
Let's connect the 3 push buttons to the pin 2, 3, 4 of the Arduino for controlling the volume/start/stop/previous song/next song.


There is another option and it is to connect two push buttons directly to the module IO1,IO2 .
( they have built-in functions 
IO 1 - 1. long press on push button will volume up. 2.short press will play next song
IO 2 - 1. long press on push button will volume down. 2.short press will play previous song

******************************/

/* dfplayer pinout connection:
   vcc - 5v
   GND - ground
   spk1 - positive speaker wire
   spk2 - negative speaker wire
   RX - connect to pin 11 with 1k ressistor
   TX - connect to pin 10
   IO 1 - pushbutton 1 - volume up/next song // pushbutton2 - pin 3 // next  song
   IO 2 - pushbutton 1 - volume up/next song //
   pushbutton1 - pin 2 // play/pause

*/
/************************
  list of functions:
  play();  // playing song N1
  pause();
  playFirst();
  playNext();
  playPrevious();
  setVolume(int);
  execute_CMD(); //direct command for dfplayer module
**************************/

#include <DFPlayerMini_Fast.h>
#include "SoftwareSerial.h"
SoftwareSerial mySerial(10, 11);
# define Start_Byte 0x7E
# define Version_Byte 0xFF
# define Command_Length 0x06
# define End_Byte 0xEF
# define Acknowledge 0x00 //Returns info with command 0x41 [0x01: info, 0x00: no info]
# define ACTIVATED LOW
int buttonNext = 2;
int buttonPause = 3; //this pushbutton can be connected to IOT1 pin
int buttonPrevious = 4;
boolean isPlaying = false;
void setup () {
  Serial.begin(9600); //setup monitor
  mySerial.begin (9600); //setup myserial
  delay(1000);
  pinMode(buttonPause, INPUT);// declare button as input
  digitalWrite(buttonPause, HIGH);  //declare play/pause button as input
  pinMode(buttonNext, INPUT);// declare next button as input
  digitalWrite(buttonNext, HIGH);
  pinMode(buttonPrevious, INPUT);
  digitalWrite(buttonPrevious, HIGH);
  delay(1000);
  playFirst();
  isPlaying = true;
}
void loop () {

  if (digitalRead(buttonPause) == ACTIVATED)
  {
    if (isPlaying)
    {
      pause();
      isPlaying = false;
    } else
    {
      isPlaying = true;
      play();
    }
  }
//this condition is not necessary if you connect pushbutton to IO 1 
//but lets leave this condition for another option for testing
  if (digitalRead(buttonNext) == ACTIVATED)
  {
    if (isPlaying)
    {
      playNext();
    }
  }
  if (digitalRead(buttonPrevious) == ACTIVATED)
  {
    if (isPlaying)
    {
      playPrevious();
    }
  }
}
void playFirst()
{
  execute_CMD(0x3F, 0, 0);
  delay(500);
  setVolume(28);
  delay(500);
  execute_CMD(0x11, 0, 1);
  delay(500);
}
void pause()
{
  execute_CMD(0x0E, 0, 0);
  Serial.print(" pause ");
  delay(500);
}
void play()
{
  execute_CMD(0x0D, 0, 1);
  Serial.print(" play ");
  delay(500);
}
void playNext()
{
  execute_CMD(0x01, 0, 1);
  Serial.print("playing next song ");
  delay(500);
}
void playPrevious()
{
  execute_CMD(0x02, 0, 1);
  Serial.print("playing previous song");
  delay(500);
}
void setVolume(int volume)
{
  execute_CMD(0x06, 0, volume); // Set the volume (0x00~0x30)
  delay(2000);
}
void execute_CMD(byte CMD, byte Par1, byte Par2)
// Excecute the command and parameters
{
  // Calculate the checksum (2 bytes)
  word checksum = -(Version_Byte + Command_Length + CMD + Acknowledge + Par1 + Par2);
  // Build the command line
  byte Command_line[10] = { Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge,
                            Par1, Par2, highByte(checksum), lowByte(checksum), End_Byte
                          };
  //Send the command line to the module
  for (byte k = 0; k < 10; k++)
  {
    mySerial.write( Command_line[k]);
  }
}